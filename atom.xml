<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kai&#39;s Blog</title>
  
  <subtitle>Kai&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-10T05:11:34.860Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AstorKai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法设计------BinaryIndexedTree</title>
    <link href="http://yoursite.com/2019/03/10/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1-BinaryIndexedTree/"/>
    <id>http://yoursite.com/2019/03/10/算法设计-BinaryIndexedTree/</id>
    <published>2019-03-10T05:10:08.000Z</published>
    <updated>2019-03-10T05:11:34.860Z</updated>
    
    <content type="html"><![CDATA[<h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>为了方便理解Binary Indexed Tree,考虑以下问题：</p><blockquote><p>对于数组 arr[1…n]，执行以下两种操作:</p></blockquote><blockquote><ul><li>getSum()操作：计算前i个元素的和。</li><li>update()操作：改变第i个元素的值，arr[i] = x (1 &lt;= i &lt;= n)。</li></ul></blockquote><a id="more"></a><h3 id="两个简单的解决方案"><a href="#两个简单的解决方案" class="headerlink" title="两个简单的解决方案"></a>两个简单的解决方案</h3><p>方案一： 通过遍历数组计算前i个元素的和O( n )的时间复杂度。更新元素直接赋值O( 1 )的时间复杂度。</p><p>方案二：创建另一个数组，并在这个数组的第i个索引存储从开始到结束的总和。可以在O（1）时间内计算给定范围的总和，但是更新操作需要O（n）个时间。</p><p>两种方案在需操作数组量很大的情况下，都不是很理想，有什么方案能让两种操作都在O（log n）的时间复杂度内完成呢？。</p><h3 id="Binary-Indexed-Tree（树状数组）"><a href="#Binary-Indexed-Tree（树状数组）" class="headerlink" title="Binary Indexed Tree（树状数组）"></a>Binary Indexed Tree（树状数组）</h3><p>Binary Indexed Tree 基于“所有的正整数都可以表示为2的幂的和”这样的事实（例如，5可以表示为4 + 1），巧妙的将数组进行分割。为上述问题提供了两种操作时间复杂度都控制在O(Log n )的方案。</p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p>Binary Indexed Tree 以数组的形式表示（所以又叫树状数组），记为BITree[]。BITree[]中的元素个数与初始数组arr[]一致。 BITree[]中每个元素存储arr[]的某些元素的总和。</p><p><img src="/2019/03/10/算法设计-BinaryIndexedTree/Binary_Index_Tree.png" alt=""></p><h4 id="getSum-amp-update-实现分析"><a href="#getSum-amp-update-实现分析" class="headerlink" title="getSum() &amp; update() 实现分析"></a>getSum() &amp; update() 实现分析</h4><p>为方便讨论假定数组下标从1开始， 为更清晰的看到规律，我们以二进制的形式表示数组下标。</p><h4 id="getSum-分析"><a href="#getSum-分析" class="headerlink" title="getSum()分析"></a>getSum()分析</h4><p>分析以下求和操作：</p><p>求和getSum（4）： getSum( 0100 ) = BITree [ 0100 ] . </p><p>求和getSum（5）：getSum( 0101 ) = BITree [ 0101 ] + BITree [ 0100 ]。</p><p>求和getSum（7）：getSum( 0111 ) = BITree [ 0111 ] + BITree [ 0110 ] + BITree [ 0100 ] 。 </p><p>求和getSum（11）：getSum( 1011 ) = BITree [ 1011 ] + BITree [ 1010 ] + BITree [ 1000 ] 。</p><p>可以看到getSum(i) 的结果可以通过x个BITree元素求和获得，且遵循以下规律：</p><ul><li>x等于 i二进制表示下位值为1的数量。</li><li>待求和BITree元素下标可通过迭代i = i - (i &amp; (-i))获得，即从右往左将所有为1的二进制位置为0。（i &amp; (-i) 返回 i 的二进制数最低位为１的权值）。</li></ul><h4 id="update-分析"><a href="#update-分析" class="headerlink" title="update()分析"></a>update()分析</h4><p>update（1）: update（0001）——&gt; update (0010) ——&gt;update(0100)——&gt;update(1000)</p><p>update（3）: update（0011）——&gt; update (0010) ——&gt;update(0100)——&gt;update(1000)</p><p>update（5）: update（0101）——&gt; update (0110) ——&gt;update(1000)</p><p>当我们更新第i个元素，直接受影响的下标可通过将i 加上i的最位为1的权值获得，受影响的元素下标可通过迭代i = i + (i &amp; (-i))获得。</p><h3 id="Binary-Indexed-Tree-可视化演示"><a href="#Binary-Indexed-Tree-可视化演示" class="headerlink" title="Binary Indexed Tree 可视化演示"></a>Binary Indexed Tree 可视化演示</h3><p><a href="https://visualgo.net/zh/fenwicktree?slide=1" target="_blank" rel="noopener">可视化演示</a></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="h-文件"><a href="#h-文件" class="headerlink" title=".h 文件"></a>.h 文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int getSum(int BITree[], int index);//求和</span><br><span class="line">void updateBIT(int BITree[], int n, int index, int val);//更新BITree的第n个节点</span><br><span class="line">int *constructBITree(int arr[], int n);//构建BITree</span><br><span class="line"></span><br><span class="line">#endif /* BITree_h */</span><br></pre></td></tr></table></figure><h4 id="c文件"><a href="#c文件" class="headerlink" title=".c文件"></a>.c文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;BITree.h&quot;</span><br><span class="line">#include &quot;stdlib.h&quot;</span><br><span class="line"></span><br><span class="line">int getSum(int BITree[], int index)</span><br><span class="line">&#123;</span><br><span class="line">    int sum = 0;</span><br><span class="line">    </span><br><span class="line">    //迭代求和</span><br><span class="line">    while (index&gt;0)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += BITree[index];</span><br><span class="line">        index -= index &amp; (-index);</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void updateBIT(int BITree[], int n, int index, int val)</span><br><span class="line">&#123;</span><br><span class="line">    // 迭代更新所有相关元素</span><br><span class="line">    while (index &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        BITree[index] += val;</span><br><span class="line">        index += index &amp; (-index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int *constructBITree(int arr[], int n)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    int * BITree = malloc(sizeof(int) * (n));</span><br><span class="line">    for (int i=0 ; i&lt;n; i++)</span><br><span class="line">        BITree[i] = 0;</span><br><span class="line">    </span><br><span class="line">    // 更新BITree，从1开始为有效数据</span><br><span class="line">    for (int i=1; i&lt; n; i++)</span><br><span class="line">        updateBIT(BITree, n, i, arr[i]);</span><br><span class="line">    </span><br><span class="line">    return BITree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void testBITree()&#123;</span><br><span class="line">    //第0 个元素为无效元素</span><br><span class="line">    int freq[] = &#123;0,2, 1, 5, 7, 9, 5, 8, 9, 4, 2, 9&#125;;</span><br><span class="line">    int n = sizeof(freq)/sizeof(freq[0]);</span><br><span class="line">    int *BITree = constructBITree(freq, n);</span><br><span class="line">    </span><br><span class="line">    printf(&quot;Sum of elements in arr[1..5] is %d\n&quot;,getSum(BITree, 11));</span><br><span class="line"></span><br><span class="line">    // 更新操作</span><br><span class="line">    freq[3] += 6;</span><br><span class="line">    updateBIT(BITree, n, 3, 6); //更新</span><br><span class="line">    printf(&quot;After update Sum of elements in arr[1..5] is %d\n&quot;,getSum(BITree, 11));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sum of elements in arr[1..5] is 61</span><br><span class="line">After update Sum of elements in arr[1..5] is 67</span><br></pre></td></tr></table></figure><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://www.geeksforgeeks.org/binary-indexed-tree-or-fenwick-tree-2/" target="_blank" rel="noopener">Binary Indexed Tree or Fenwick Tree</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;举个栗子&quot;&gt;&lt;a href=&quot;#举个栗子&quot; class=&quot;headerlink&quot; title=&quot;举个栗子&quot;&gt;&lt;/a&gt;举个栗子&lt;/h3&gt;&lt;p&gt;为了方便理解Binary Indexed Tree,考虑以下问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于数组 arr[1…n]，执行以下两种操作:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;getSum()操作：计算前i个元素的和。&lt;/li&gt;
&lt;li&gt;update()操作：改变第i个元素的值，arr[i] = x (1 &amp;lt;= i &amp;lt;= n)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法设计" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>算法设计------Binary Search Tree</title>
    <link href="http://yoursite.com/2019/03/10/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1-Binary-Search-Tree/"/>
    <id>http://yoursite.com/2019/03/10/算法设计-Binary-Search-Tree/</id>
    <published>2019-03-10T05:08:34.000Z</published>
    <updated>2019-03-10T05:09:45.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法设计——Binary-Search-Tree"><a href="#算法设计——Binary-Search-Tree" class="headerlink" title="算法设计——Binary Search Tree"></a>算法设计——Binary Search Tree</h2><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><blockquote><p>定义：二叉搜索树为具有以下性质的二叉树：对于每个节点 v</p></blockquote><blockquote><ul><li>v 的值 &gt; v的左子树的每个节点的值</li><li>v 的值 &lt; v的右子树的每个节点的值</li><li>没有重复的节点</li></ul></blockquote><p><img src="/2019/03/10/算法设计-Binary-Search-Tree/Binary_search_tree.png" alt=""></p><a id="more"></a><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>基于二叉搜索树的上述性质，相比于其他数据结构的优势在于：</p><ul><li>查找、插入、删除的时间复杂度较低，为O(log n)，最坏为O( n )（数列有序，树退化为线性表）。</li><li>很容易获取最大值（树的最右结点）、最小值（树的最左节点）、某元素的前驱（左子树的最右）、某元素的后继（右子树的最左）</li><li>每次插入新的节点都是二叉树线上新的叶子节点，在进行插入操作时，不必移动其他节点，只需改动某节点指针，由空变为非空即可。</li><li>对二叉搜索树进行中序遍历可得到有序数列。</li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h4><ol><li>给定值等于根，返回根。</li><li>给定值小于根，在根的左子树查找。</li><li>给定值大于根，在根的右子树查找。</li></ol><h4 id="插入算法"><a href="#插入算法" class="headerlink" title="插入算法"></a>插入算法</h4><p>从根开始搜索，直到找到一个叶子节点，新的节点作为该叶子的子节点插入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    100                               100</span><br><span class="line">    /   \        Insert 40            /    \</span><br><span class="line">  20     500    ---------&gt;          20     500 </span><br><span class="line"> /  \                              /  \  </span><br><span class="line">10   30                           10   30</span><br><span class="line">                                          \   </span><br><span class="line">                                          40</span><br></pre></td></tr></table></figure><h4 id="删除算法"><a href="#删除算法" class="headerlink" title="删除算法"></a>删除算法</h4><p>删除的节点为叶子节点，直接删除即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       50                            50</span><br><span class="line">    /     \         delete(20)      /   \</span><br><span class="line">   30      70       ---------&gt;    30     70 </span><br><span class="line">  /  \    /  \                     \    /  \ </span><br><span class="line">20   40  60   80                   40  60   80</span><br></pre></td></tr></table></figure><p>删除的节点有一个子节点，删除该子节点，并用其唯一子节点代替其位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    50                            50</span><br><span class="line"> /     \         delete(30)      /   \</span><br><span class="line">30      70       ---------&gt;    40     70 </span><br><span class="line">  \    /  \                          /  \ </span><br><span class="line">  40  60   80                       60   80</span><br></pre></td></tr></table></figure><p>删除的节点有两个子节点，找到该节点的右子树的最小节点k，以k替换掉待删除节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">50                            60</span><br><span class="line"> /     \         delete(50)      /   \</span><br><span class="line">40      70       ---------&gt;    40    70 </span><br><span class="line">       /  \                            \ </span><br><span class="line">      60   80                           80</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="h文件"><a href="#h文件" class="headerlink" title=".h文件"></a>.h文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">typedef struct tree_Node&#123;</span><br><span class="line">    int memeber;//数据域</span><br><span class="line">    struct tree_Node * left_Child;//左孩子</span><br><span class="line">    struct tree_Node * right_Child;//右孩子</span><br><span class="line">&#125;Tree_Node, * p_Tree_Node;</span><br><span class="line"></span><br><span class="line">p_Tree_Node newNode(int member);</span><br><span class="line">p_Tree_Node insert(p_Tree_Node node, int member);//插入</span><br><span class="line">p_Tree_Node searchNode(p_Tree_Node root, int key);//搜索</span><br><span class="line">p_Tree_Node maxValue(p_Tree_Node root);//最大值</span><br><span class="line">p_Tree_Node minValue(p_Tree_Node root);//最小值</span><br><span class="line">p_Tree_Node deleteNode(p_Tree_Node root, int member);//删除</span><br><span class="line">//中序遍历</span><br><span class="line">void inorderTree(p_Tree_Node root);</span><br></pre></td></tr></table></figure><h4 id="c文件"><a href="#c文件" class="headerlink" title=".c文件"></a>.c文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">p_Tree_Node newNode(int member)&#123;</span><br><span class="line">    p_Tree_Node node = (p_Tree_Node) malloc(sizeof(Tree_Node));</span><br><span class="line">    if (node == NULL) &#123;</span><br><span class="line">        printf(&quot;分配内存失败！&quot;);</span><br><span class="line">        exit(-1);</span><br><span class="line">    &#125;</span><br><span class="line">    node -&gt; memeber = member;</span><br><span class="line">    node -&gt; left_Child = NULL;</span><br><span class="line">    node -&gt; right_Child = NULL;</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p_Tree_Node insert(p_Tree_Node node, int member)&#123;</span><br><span class="line">    </span><br><span class="line">    if (node == NULL) return newNode(member);</span><br><span class="line">    </span><br><span class="line">    if (member &lt; node -&gt; memeber) &#123;</span><br><span class="line">        node -&gt; left_Child = insert(node -&gt; left_Child, member);</span><br><span class="line">    &#125;else if (member &gt; node -&gt; memeber)&#123;</span><br><span class="line">        node -&gt; right_Child = insert(node -&gt; right_Child, member);</span><br><span class="line">    &#125;</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p_Tree_Node minValue(p_Tree_Node root)&#123;</span><br><span class="line">    p_Tree_Node minNode = root;</span><br><span class="line">    while (minNode -&gt; left_Child) &#123;</span><br><span class="line">        minNode = minNode -&gt; left_Child;</span><br><span class="line">    &#125;</span><br><span class="line">    return minNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p_Tree_Node maxValue(p_Tree_Node root)&#123;</span><br><span class="line">    p_Tree_Node maxNode = root;</span><br><span class="line">    while (maxNode -&gt; right_Child) &#123;</span><br><span class="line">        maxNode = maxNode -&gt; right_Child;</span><br><span class="line">    &#125;</span><br><span class="line">    return maxNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p_Tree_Node deleteNode(p_Tree_Node root, int member)&#123;</span><br><span class="line">    if (root == NULL) &#123;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">    if (member &lt; root -&gt; memeber) &#123;</span><br><span class="line">        root -&gt; left_Child = deleteNode(root -&gt; left_Child, member);</span><br><span class="line">    &#125;else if (member &gt; root -&gt; memeber)&#123;</span><br><span class="line">        root -&gt; right_Child = deleteNode(root -&gt; right_Child, member);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if (root -&gt; left_Child == NULL) &#123;</span><br><span class="line">            p_Tree_Node temp = root -&gt; right_Child;</span><br><span class="line">            free(root);</span><br><span class="line">            return temp;</span><br><span class="line">        &#125;else if (root -&gt; right_Child == NULL)&#123;</span><br><span class="line">            p_Tree_Node temp = root -&gt; left_Child;</span><br><span class="line">            free(root);</span><br><span class="line">            return temp;</span><br><span class="line">        &#125;</span><br><span class="line">        p_Tree_Node temp = minValue(root -&gt; right_Child);</span><br><span class="line">        root -&gt; memeber = temp -&gt; memeber;</span><br><span class="line">        root -&gt; right_Child = deleteNode(root -&gt; right_Child, temp -&gt; memeber);</span><br><span class="line">    &#125;</span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p_Tree_Node searchNode(p_Tree_Node root, int key)&#123;</span><br><span class="line">    if (root == NULL) &#123;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    if (root -&gt; memeber == key) &#123;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;else if (root -&gt; memeber &gt; key)&#123;</span><br><span class="line">        return searchNode(root -&gt; left_Child, key);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return searchNode(root -&gt; right_Child, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void inorderTree(p_Tree_Node root)&#123;</span><br><span class="line">    if (root != NULL) &#123;</span><br><span class="line">        inorderTree(root -&gt; left_Child);</span><br><span class="line">        printf(&quot;%d \n&quot;, root -&gt; memeber);</span><br><span class="line">        inorderTree(root -&gt; right_Child);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">void testBinarySearchTree()&#123;</span><br><span class="line">    /* 创建一个如下 BST</span><br><span class="line">     50</span><br><span class="line">     /     \</span><br><span class="line">     30      70</span><br><span class="line">     /  \    /  \</span><br><span class="line">     20   40  60   80 */</span><br><span class="line">    p_Tree_Node root = NULL;</span><br><span class="line">    root = insert(root, 50);</span><br><span class="line">    insert(root, 30);</span><br><span class="line">    insert(root, 20);</span><br><span class="line">    insert(root, 40);</span><br><span class="line">    insert(root, 70);</span><br><span class="line">    insert(root, 60);</span><br><span class="line">    insert(root, 80);</span><br><span class="line">    </span><br><span class="line">    inorderTree(root);</span><br><span class="line">    </span><br><span class="line">    p_Tree_Node serNode = searchNode(root, 20);</span><br><span class="line">    printf(&quot;\nserNode ----- %d\n&quot;,serNode -&gt; memeber);</span><br><span class="line">    deleteNode(root, 30);</span><br><span class="line">    inorderTree(root);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>二叉搜索树，在插入数列有序时会退化为链表，插入、删除、查找时间复杂度退化为O( n )，为降低二叉搜索树的高度可以通过构建平衡二叉树，它要求左右两个子树的高度差的绝对值不超过1，这样就可以将搜索树的高度尽可能减小。常用的算法有红黑树、AVL Tree、SBT等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;算法设计——Binary-Search-Tree&quot;&gt;&lt;a href=&quot;#算法设计——Binary-Search-Tree&quot; class=&quot;headerlink&quot; title=&quot;算法设计——Binary Search Tree&quot;&gt;&lt;/a&gt;算法设计——Binary Search Tree&lt;/h2&gt;&lt;h3 id=&quot;二叉搜索树&quot;&gt;&lt;a href=&quot;#二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树&quot;&gt;&lt;/a&gt;二叉搜索树&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;定义：二叉搜索树为具有以下性质的二叉树：对于每个节点 v&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;v 的值 &amp;gt; v的左子树的每个节点的值&lt;/li&gt;
&lt;li&gt;v 的值 &amp;lt; v的右子树的每个节点的值&lt;/li&gt;
&lt;li&gt;没有重复的节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/2019/03/10/算法设计-Binary-Search-Tree/Binary_search_tree.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法设计" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>算法设计------栈实现</title>
    <link href="http://yoursite.com/2019/03/10/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1-%E6%A0%88%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/03/10/算法设计-栈实现/</id>
    <published>2019-03-10T05:07:03.000Z</published>
    <updated>2019-03-10T05:07:56.651Z</updated>
    
    <content type="html"><![CDATA[<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote><p>栈（stack）又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。栈中元素的进出是按后进先出的原则进行，这是栈的重要特征（LIFO–Last In First Out）。</p></blockquote><a id="more"></a><h3 id="栈的C语言实现"><a href="#栈的C语言实现" class="headerlink" title="栈的C语言实现"></a>栈的C语言实现</h3><h4 id="h文件"><a href="#h文件" class="headerlink" title=".h文件"></a>.h文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">typedef struct node&#123;</span><br><span class="line">    int member;//数据域</span><br><span class="line">    struct node * pNext;</span><br><span class="line">&#125;Node,* pNode;</span><br><span class="line"></span><br><span class="line">typedef struct stack&#123;</span><br><span class="line">    pNode Top;//栈顶指针</span><br><span class="line">    pNode Bottom;//栈底指针</span><br><span class="line">&#125;Stack, * pStack;</span><br><span class="line"></span><br><span class="line">void InitStack(pStack);//初始化</span><br><span class="line">bool Push(pStack,int);//入栈操作</span><br><span class="line">int Pop(pStack);//出栈操作</span><br><span class="line">bool Empty(pStack);//判空</span><br><span class="line">void Clear(pStack);//清空</span><br><span class="line">void TraverseStack(pStack);//遍历</span><br></pre></td></tr></table></figure><h4 id="c文件"><a href="#c文件" class="headerlink" title=".c文件"></a>.c文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">void InitStack(pStack);</span><br><span class="line">bool Push(pStack,int);</span><br><span class="line">int Pop(pStack);</span><br><span class="line">bool Empty(pStack);</span><br><span class="line">void clear(pStack);</span><br><span class="line">void TraverseStack(pStack);</span><br><span class="line"></span><br><span class="line">void InitStack(pStack ps)&#123;</span><br><span class="line">    ps -&gt; Top =  malloc(sizeof(Node));</span><br><span class="line">    if (NULL == ps -&gt; Top) &#123;</span><br><span class="line">        printf(&quot;动态分配内存失败&quot;);</span><br><span class="line">        exit(-1);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        ps -&gt; Bottom = ps -&gt; Top;</span><br><span class="line">        ps -&gt; Top -&gt; pNext = NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool Push(pStack ps,int num)&#123;</span><br><span class="line">    </span><br><span class="line">    pNode newNode = (pNode) malloc(sizeof(Node));</span><br><span class="line">    if (NULL == newNode) &#123;</span><br><span class="line">        printf(&quot;动态分配内存失败&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        newNode -&gt; member = num;</span><br><span class="line">        newNode -&gt; pNext = ps -&gt; Top;</span><br><span class="line">        ps -&gt; Top = newNode;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool Empty(pStack ps)&#123;</span><br><span class="line">    </span><br><span class="line">    if (ps -&gt; Top == ps -&gt; Bottom) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Pop(pStack ps)&#123;</span><br><span class="line">    int return_val;</span><br><span class="line">    if (Empty(ps)) &#123;</span><br><span class="line">        exit(-1);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return_val = ps -&gt; Top -&gt; member;</span><br><span class="line">        pNode tempNode = ps -&gt; Top;</span><br><span class="line">        ps -&gt; Top = ps -&gt; Top -&gt; pNext;</span><br><span class="line">        free(tempNode);</span><br><span class="line">        return return_val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TraverseStack(pStack ps)&#123;</span><br><span class="line">    pNode traverNode = ps -&gt; Top;</span><br><span class="line">    while (!(traverNode == ps -&gt; Bottom)) &#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,traverNode -&gt; member);</span><br><span class="line">        traverNode = traverNode -&gt; pNext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Clear(pStack ps)&#123;</span><br><span class="line">    pNode tempNode = NULL;</span><br><span class="line">    while (ps -&gt; Top != ps -&gt; Bottom) &#123;</span><br><span class="line">        tempNode = ps -&gt; Top;</span><br><span class="line">        ps -&gt; Top = ps -&gt; Top -&gt; pNext;</span><br><span class="line">        free(tempNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">void testStack ()&#123;</span><br><span class="line">    Stack s;</span><br><span class="line">    int i;</span><br><span class="line">    int re_num;</span><br><span class="line">    InitStack(&amp;s);</span><br><span class="line">    </span><br><span class="line">    for (i = 0 ; i &lt; 5; i++) &#123;</span><br><span class="line">        printf(&quot;第 %d 个数：\n&quot;,i+1);</span><br><span class="line">        if (Push(&amp;s, i + 1)) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            printf(&quot;进行入栈操作失败！\n&quot;);</span><br><span class="line">            exit(-1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;stack after Push\n&quot;);</span><br><span class="line">    TraverseStack(&amp;s);</span><br><span class="line">    </span><br><span class="line">    for (int i = 0; i &lt; 3; i ++) &#123;</span><br><span class="line">        re_num = Pop(&amp;s);</span><br><span class="line">        printf(&quot;remover %d &quot;,re_num);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;stack after Pop\n&quot;);</span><br><span class="line">    TraverseStack(&amp;s);</span><br><span class="line">    </span><br><span class="line">    Clear(&amp;s);</span><br><span class="line">    </span><br><span class="line">    printf(&quot;stack after clear \n&quot;);</span><br><span class="line">    TraverseStack(&amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#####时间复杂度：push、pop操作的时间复杂度均为 O(1)</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;栈（stack）又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。栈中元素的进出是按后进先出的原则进行，这是栈的重要特征（LIFO–Last In First Out）。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法设计" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>算法设计------利用并查集检测无向图的环</title>
    <link href="http://yoursite.com/2019/03/10/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1-%E5%88%A9%E7%94%A8%E5%B9%B6%E6%9F%A5%E9%9B%86%E6%A3%80%E6%B5%8B%E6%97%A0%E5%90%91%E5%9B%BE%E7%9A%84%E7%8E%AF/"/>
    <id>http://yoursite.com/2019/03/10/算法设计-利用并查集检测无向图的环/</id>
    <published>2019-03-10T05:04:59.000Z</published>
    <updated>2019-03-10T05:06:41.003Z</updated>
    
    <content type="html"><![CDATA[<h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><blockquote><p>定义：并查集是一种树型的数据结构，用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。常常在使用中以森林来表示。</p></blockquote><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><ul><li>以一颗有根树代表每个集合。</li><li>每个节点维护一个指向其父节点的链接。</li><li>对于每个集合根节点为该集合的代表。</li><li>例如： 集合{x,y,z}和{a,b,c,d}。</li></ul><p><img src="/2019/03/10/算法设计-利用并查集检测无向图的环/union_find.png" alt=""></p><a id="more"></a><h3 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a>主要操作</h3><ul><li>Find(X):查找元素X所在集合，可用于确定两个元素是否在相同的子集中。</li><li>Union(x,y):将元素x，y所在的两个集合中合并为一个集合。</li></ul><h3 id="并查集实现"><a href="#并查集实现" class="headerlink" title="并查集实现"></a>并查集实现</h3><h4 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Naive implementation of find</span><br><span class="line">int find(int parent[], int i)</span><br><span class="line">&#123;</span><br><span class="line">    if (parent[i] == i)</span><br><span class="line">        return i;</span><br><span class="line">    return find(parent, parent[i]);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">// Naive implementation of union()</span><br><span class="line">void Union(int parent[], int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    int xset = find(parent, x);</span><br><span class="line">    int yset = find(parent, y);</span><br><span class="line">    parent[xset] = yset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的Union()和Find()实现,最坏的情况下,会产生一个很深的树，成一个链表，find()的时间复杂度是线性的O(n)。以下是一个最坏情况的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">假设有四个元素0，1，2，3</span><br><span class="line"></span><br><span class="line">最初每个元素为一个单元素子集</span><br><span class="line">0 1 2 3 </span><br><span class="line"></span><br><span class="line">执行 Union(0, 1)</span><br><span class="line">   1   2   3  </span><br><span class="line">  /</span><br><span class="line"> 0</span><br><span class="line"></span><br><span class="line">执行 Union(1, 2)</span><br><span class="line">     2   3   </span><br><span class="line">    /</span><br><span class="line">   1</span><br><span class="line"> /</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">执行 Union(2, 3) </span><br><span class="line">         3    </span><br><span class="line">        /</span><br><span class="line">      2</span><br><span class="line">     /</span><br><span class="line">   1</span><br><span class="line"> /</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="Union-优化：按秩合并"><a href="#Union-优化：按秩合并" class="headerlink" title="Union()优化：按秩合并"></a>Union()优化：按秩合并</h4><p>按秩合并，即合并时总是在更深的树根下附加更小深度的树。此时，最坏情况下，find()的时间复杂度为O(Logn)。以下为按秩合并示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">最初每个元素为一个单元素子集</span><br><span class="line">0 1 2 3</span><br><span class="line"></span><br><span class="line">执行 Union(0, 1)</span><br><span class="line">   1   2   3  </span><br><span class="line">  /</span><br><span class="line"> 0</span><br><span class="line"></span><br><span class="line">执行 Union(1, 2)</span><br><span class="line">   1    3</span><br><span class="line"> /  \</span><br><span class="line">0    2</span><br><span class="line"></span><br><span class="line">执行 Union(2, 3)</span><br><span class="line">    1    </span><br><span class="line"> /  |  \</span><br><span class="line">0   2   3</span><br></pre></td></tr></table></figure><h4 id="find-优化：路径压缩"><a href="#find-优化：路径压缩" class="headerlink" title="find()优化：路径压缩"></a>find()优化：路径压缩</h4><p>路径压缩，即在执行find(x)时，“顺便”将x的父节点改为查找到的根节点，以后再调用find(x)就只需O(1)的时间且如果x是子树的根，那么子树的所有节点到根节点的路径都会被压缩。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">假设在如下子集调用find(3)</span><br><span class="line">              9</span><br><span class="line">         /    |    \  </span><br><span class="line">        4     5      6</span><br><span class="line">     /     \        /  \</span><br><span class="line">    0        3     7    8</span><br><span class="line">            /  \</span><br><span class="line">           1    2  </span><br><span class="line"></span><br><span class="line">在执行find(3)时，我们“顺便”将3的父节点指向9，当下一次调用find()参数为1，2，3时，其到根节点的路径都会被压缩。</span><br><span class="line"></span><br><span class="line">               9</span><br><span class="line">         /    /  \    \</span><br><span class="line">        4    5    6     3 </span><br><span class="line">     /           /  \   /  \</span><br><span class="line">    0           7    8  1   2</span><br></pre></td></tr></table></figure><p>按秩合并和路径压缩两种优化下的并查集，find()的时间复杂度小于O(Logn)。</p><h3 id="并查集应用——检测无向图中的环"><a href="#并查集应用——检测无向图中的环" class="headerlink" title="并查集应用——检测无向图中的环"></a>并查集应用——检测无向图中的环</h3><blockquote><p>原理：对于图的每个边，找到每个边的两个顶点集，如果两个顶点集相同，则找到一个环。</p></blockquote><h4 id="C语言实现"><a href="#C语言实现" class="headerlink" title="C语言实现"></a>C语言实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"> </span><br><span class="line">// 边结构</span><br><span class="line">struct Edge</span><br><span class="line">&#123;</span><br><span class="line">    int src, dest;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">// 图结构</span><br><span class="line">struct Graph</span><br><span class="line">&#123;</span><br><span class="line">    // V-&gt; 顶点的数量, E-&gt; 边的数量</span><br><span class="line">    int V, E;</span><br><span class="line"> </span><br><span class="line">    // 图是一个边的集合</span><br><span class="line">    struct Edge* edge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct subset</span><br><span class="line">&#123;</span><br><span class="line">    int parent;</span><br><span class="line">    int rank;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">// 创建图</span><br><span class="line">struct Graph* createGraph(int V, int E)</span><br><span class="line">&#123;</span><br><span class="line">    struct Graph* graph = (struct Graph*) malloc( sizeof(struct Graph) );</span><br><span class="line">    graph-&gt;V = V;</span><br><span class="line">    graph-&gt;E = E;</span><br><span class="line"> </span><br><span class="line">    graph-&gt;edge = (struct Edge*) malloc( graph-&gt;E * sizeof( struct Edge ) );</span><br><span class="line"> </span><br><span class="line">    return graph;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 以路径压缩方式实现find()</span><br><span class="line">int find(struct subset subsets[], int i)</span><br><span class="line">&#123;</span><br><span class="line">    // find root and make root as parent of i (path compression)</span><br><span class="line">    if (subsets[i].parent != i)</span><br><span class="line">        subsets[i].parent = find(subsets, subsets[i].parent);</span><br><span class="line"> </span><br><span class="line">    return subsets[i].parent;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 以按秩合并实现Union()</span><br><span class="line">void Union(struct subset subsets[], int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    int xroot = find(subsets, x);</span><br><span class="line">    int yroot = find(subsets, y);</span><br><span class="line"> </span><br><span class="line">    // 在更深的树的根下附加更浅的树</span><br><span class="line">    if (subsets[xroot].rank &lt; subsets[yroot].rank)</span><br><span class="line">        subsets[xroot].parent = yroot;</span><br><span class="line">    else if (subsets[xroot].rank &gt; subsets[yroot].rank)</span><br><span class="line">        subsets[yroot].parent = xroot;</span><br><span class="line"> </span><br><span class="line">    // 两个树的深度相同，rank++</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        subsets[yroot].parent = xroot;</span><br><span class="line">        subsets[xroot].rank++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//检测给定图中是否有环</span><br><span class="line">int isCycle( struct Graph* graph )</span><br><span class="line">&#123;</span><br><span class="line">    int V = graph-&gt;V;</span><br><span class="line">    int E = graph-&gt;E;</span><br><span class="line"> </span><br><span class="line">    // 每个顶点初始化为一个集合</span><br><span class="line">    struct subset *subsets =</span><br><span class="line">        (struct subset*) malloc( V * sizeof(struct subset) );</span><br><span class="line"> </span><br><span class="line">    for (int v = 0; v &lt; V; ++v)</span><br><span class="line">    &#123;</span><br><span class="line">        subsets[v].parent = v;</span><br><span class="line">        subsets[v].rank = 0;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">    // 遍历图的所有边，找到每个边的两个顶点集，如果集相同，则在图中有循环。</span><br><span class="line">    for(int e = 0; e &lt; E; ++e)</span><br><span class="line">    &#123;</span><br><span class="line">        int x = find(subsets, graph-&gt;edge[e].src);</span><br><span class="line">        int y = find(subsets, graph-&gt;edge[e].dest);</span><br><span class="line"> </span><br><span class="line">        if (x == y)</span><br><span class="line">            return 1;</span><br><span class="line"> </span><br><span class="line">        Union(subsets, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//测试代码</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    /* 创建如下图</span><br><span class="line">         0</span><br><span class="line">        |  \</span><br><span class="line">        |    \</span><br><span class="line">        1-----2 */</span><br><span class="line"> </span><br><span class="line">    int V = 3, E = 3;</span><br><span class="line">    struct Graph* graph = createGraph(V, E);</span><br><span class="line"> </span><br><span class="line">    // 边 0-1</span><br><span class="line">    graph-&gt;edge[0].src = 0;</span><br><span class="line">    graph-&gt;edge[0].dest = 1;</span><br><span class="line"> </span><br><span class="line">    // 边 1-2</span><br><span class="line">    graph-&gt;edge[1].src = 1;</span><br><span class="line">    graph-&gt;edge[1].dest = 2;</span><br><span class="line"> </span><br><span class="line">    // 边 0-2</span><br><span class="line">    graph-&gt;edge[2].src = 0;</span><br><span class="line">    graph-&gt;edge[2].dest = 2;</span><br><span class="line"> </span><br><span class="line">    if (isCycle(graph))</span><br><span class="line">        printf( &quot;Graph contains cycle&quot; );</span><br><span class="line">    else</span><br><span class="line">        printf( &quot;Graph doesn&apos;t contain cycle&quot; );</span><br><span class="line"> </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;定义：并查集是一种树型的数据结构，用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。常常在使用中以森林来表示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;核心思想&quot;&gt;&lt;a href=&quot;#核心思想&quot; class=&quot;headerlink&quot; title=&quot;核心思想&quot;&gt;&lt;/a&gt;核心思想&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;以一颗有根树代表每个集合。&lt;/li&gt;
&lt;li&gt;每个节点维护一个指向其父节点的链接。&lt;/li&gt;
&lt;li&gt;对于每个集合根节点为该集合的代表。&lt;/li&gt;
&lt;li&gt;例如： 集合{x,y,z}和{a,b,c,d}。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2019/03/10/算法设计-利用并查集检测无向图的环/union_find.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法设计" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>算法设计------扩展欧几里德算法</title>
    <link href="http://yoursite.com/2019/03/10/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1-%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/10/算法设计-扩展欧几里德算法/</id>
    <published>2019-03-10T05:01:45.000Z</published>
    <updated>2019-03-10T05:03:20.695Z</updated>
    
    <content type="html"><![CDATA[<h3 id="扩展欧几里德算法"><a href="#扩展欧几里德算法" class="headerlink" title="扩展欧几里德算法"></a>扩展欧几里德算法</h3><blockquote><p>定义： 扩展欧几里德算法，是欧几里德算法的扩展。已知整数a、b，扩展欧几里德算法可以在求得a、b的最大公约数的同时，能找到整数x、y（其中一个很可能是负数），使它们满足贝祖等式:</p></blockquote><pre><code>ax + by = gcd(a,b).  </code></pre><blockquote><p>有两个数a,b，对它们进行辗转相除法，可得它们的最大公约数——这是众所周知的。然后，收集辗转相除法中产生的式子，倒回去，可以得到ax+by=gcd(a,b)的整数解。</p></blockquote><a id="more"></a><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int gcdEx(int a ,int b , int *x, int *y)&#123;</span><br><span class="line">    if (b == 0) &#123;</span><br><span class="line">        *x = 1;</span><br><span class="line">        *y = 0;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        int r = gcdEx(b, a % b, x, y);</span><br><span class="line">        int t = *x;</span><br><span class="line">        *x = *y;</span><br><span class="line">        *y = t - a/b * *y;</span><br><span class="line">        return r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>O(㏒ a + b)</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;扩展欧几里德算法&quot;&gt;&lt;a href=&quot;#扩展欧几里德算法&quot; class=&quot;headerlink&quot; title=&quot;扩展欧几里德算法&quot;&gt;&lt;/a&gt;扩展欧几里德算法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;定义： 扩展欧几里德算法，是欧几里德算法的扩展。已知整数a、b，扩展欧几里德算法可以在求得a、b的最大公约数的同时，能找到整数x、y（其中一个很可能是负数），使它们满足贝祖等式:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;ax + by = gcd(a,b).  
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;有两个数a,b，对它们进行辗转相除法，可得它们的最大公约数——这是众所周知的。然后，收集辗转相除法中产生的式子，倒回去，可以得到ax+by=gcd(a,b)的整数解。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法设计" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>算法设计------计算a的n次方</title>
    <link href="http://yoursite.com/2019/03/10/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1-%E8%AE%A1%E7%AE%97a%E7%9A%84n%E6%AC%A1%E6%96%B9/"/>
    <id>http://yoursite.com/2019/03/10/算法设计-计算a的n次方/</id>
    <published>2019-03-10T04:58:40.000Z</published>
    <updated>2019-03-10T05:01:05.733Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数学公式归纳"><a href="#数学公式归纳" class="headerlink" title="数学公式归纳"></a>数学公式归纳</h3><p><img src="/2019/03/10/算法设计-计算a的n次方/a^n.png" alt=""></p><a id="more"></a><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">double pow (double a, int n)&#123;</span><br><span class="line">    if (n == 0) return 1;</span><br><span class="line">    if (n == 1) return n;</span><br><span class="line">    double t = pow(a, n/2);</span><br><span class="line">    return t * t * pow(a, n%2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">double pow (double a, int n)&#123;</span><br><span class="line">    double ret = 1;</span><br><span class="line">    while (n) &#123;</span><br><span class="line">        if (n%2 == 1) ret *= a;</span><br><span class="line">        a *= a; n /= 2;</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>O(㏒ n)</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数学公式归纳&quot;&gt;&lt;a href=&quot;#数学公式归纳&quot; class=&quot;headerlink&quot; title=&quot;数学公式归纳&quot;&gt;&lt;/a&gt;数学公式归纳&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2019/03/10/算法设计-计算a的n次方/a^n.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法设计" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>算法设计------计算最大公约数 </title>
    <link href="http://yoursite.com/2019/03/10/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1-%E8%AE%A1%E7%AE%97%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/"/>
    <id>http://yoursite.com/2019/03/10/算法设计-计算最大公约数/</id>
    <published>2019-03-10T04:57:14.000Z</published>
    <updated>2019-03-10T04:58:00.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="欧几里德算法（辗转相除法）"><a href="#欧几里德算法（辗转相除法）" class="headerlink" title="欧几里德算法（辗转相除法）"></a>欧几里德算法（辗转相除法）</h3><blockquote><p>定理：两个整数的最大公约数等于其中较小的那个数和两数相除余数的最大公约数。最大公约数（Greatest Common Divisor）缩写为GCD。<br>公式：gcd(a,b) = gcd(b,a mod b) (设 a &gt; b )</p></blockquote><a id="more"></a><h3 id="两个欧几里得的重要结论"><a href="#两个欧几里得的重要结论" class="headerlink" title="两个欧几里得的重要结论"></a>两个欧几里得的重要结论</h3><blockquote><p>gcd(a,b) = gcd(b,a mod b)<br>gcd(a,0) = a</p></blockquote><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int gcd(int a , int b)&#123;</span><br><span class="line">    if (b == 0) return a;</span><br><span class="line">    else return gcd(b, a%b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int gcd(int a , int b)&#123;</span><br><span class="line">    while (b) &#123;</span><br><span class="line">        int r = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = r;</span><br><span class="line">    &#125;</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>递归实现与非递归实现算法的时间复杂度均为：O(㏒ a + b)</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;欧几里德算法（辗转相除法）&quot;&gt;&lt;a href=&quot;#欧几里德算法（辗转相除法）&quot; class=&quot;headerlink&quot; title=&quot;欧几里德算法（辗转相除法）&quot;&gt;&lt;/a&gt;欧几里德算法（辗转相除法）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;定理：两个整数的最大公约数等于其中较小的那个数和两数相除余数的最大公约数。最大公约数（Greatest Common Divisor）缩写为GCD。&lt;br&gt;公式：gcd(a,b) = gcd(b,a mod b) (设 a &amp;gt; b )&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法设计" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>算法设计------构造回文需插入最少字符数</title>
    <link href="http://yoursite.com/2019/03/10/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1-%E6%9E%84%E9%80%A0%E5%9B%9E%E6%96%87%E9%9C%80%E6%8F%92%E5%85%A5%E6%9C%80%E5%B0%91%E5%AD%97%E7%AC%A6%E6%95%B0/"/>
    <id>http://yoursite.com/2019/03/10/算法设计-构造回文需插入最少字符数/</id>
    <published>2019-03-10T04:55:30.000Z</published>
    <updated>2019-03-10T04:56:28.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定字符串 x = x0…n-1,为构造x为回文最少需要插入几个字符。<br>例如：</p><ul><li>x: Ab3bd</li><li>可以构造 “dAb3bAd” 或 “Adb3bdA” 通过插入两个字符</li></ul><a id="more"></a><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>设Dij表示构造xi…j为回文需插入的最少字符数。</p><ul><li>初始情况: Dii = Di,i-1 = 0</li><li>xi = xj: Dij = Di + 1,j-1</li><li>xi != xj: Dij = min{Di+1,j,Di,j-1} + 1</li></ul><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h3><h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int count_for_dailog(char * x, int i , int j)</span><br><span class="line">&#123;</span><br><span class="line">    if(i == j)&#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    if(x[i] == x[j])&#123;</span><br><span class="line">        return count_for_dailog(x, i + 1, j - 1);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return 1 + MIN(count_for_dailog(x, i + 1, j), count_for_dailog(x, i, j - 1));</span><br><span class="line">    &#125;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>递归实现的时间复杂度为2^n ,最坏情况为，x内所有字符无重复。</p><h3 id="动态规划法"><a href="#动态规划法" class="headerlink" title="动态规划法"></a>动态规划法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">int count_for_dailog(char * x , int n)&#123;</span><br><span class="line">    int count[n][n];</span><br><span class="line">    //count[i][i]/count[i][i-1] == 0</span><br><span class="line">    for (int i = 1; i &lt; n; i ++) &#123;</span><br><span class="line">        count[i][i] = 0;</span><br><span class="line">        count[i][i - 1] = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    count[0][0] = 0;</span><br><span class="line">    //间隙由大到小</span><br><span class="line">    for (int t = 1; t &lt; n; t ++) &#123;</span><br><span class="line">        for (int i = 0 , j = t; j &lt; n; j ++ , i ++) &#123;</span><br><span class="line">            if (x[i] == x[j]) &#123;</span><br><span class="line">                count[i][j] = count[i + 1][j - 1];</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                count[i][j] = MIN(count[i + 1][j], count[i][j - 1]) + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return count[0][n - 1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>递归实现的时间复杂度为n^2。</p><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char * x = &quot;Ab3bd&quot;;</span><br><span class="line">int count = count_for_dailog(x, 5);</span><br><span class="line">printf(&quot;Ab3bd length = %d&quot;,count);</span><br></pre></td></tr></table></figure><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ab3bd length = 2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;给定字符串 x = x0…n-1,为构造x为回文最少需要插入几个字符。&lt;br&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x: Ab3bd&lt;/li&gt;
&lt;li&gt;可以构造 “dAb3bAd” 或 “Adb3bdA” 通过插入两个字符&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="算法设计" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>算法设计------斐波那契数列</title>
    <link href="http://yoursite.com/2019/03/10/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>http://yoursite.com/2019/03/10/算法设计-斐波那契数列/</id>
    <published>2019-03-10T04:52:01.000Z</published>
    <updated>2019-03-10T04:56:48.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法设计——斐波那契数列"><a href="#算法设计——斐波那契数列" class="headerlink" title="算法设计——斐波那契数列"></a>算法设计——斐波那契数列</h2><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><blockquote><p>斐波那契数列又称黄金分割数列，这个数列从第三项开始，每一项都等于前两项之和。</p></blockquote><h3 id="递推公式"><a href="#递推公式" class="headerlink" title="递推公式"></a>递推公式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">F(0) = 1;</span><br><span class="line">F(1) = 1;</span><br><span class="line">F(n) = F(n-1) + F(n-1);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="通项公式"><a href="#通项公式" class="headerlink" title="通项公式"></a>通项公式</h3><p><img src="/2019/03/10/算法设计-斐波那契数列/feibonaqi.png" alt=""></p><h3 id="递推公式算法实现"><a href="#递推公式算法实现" class="headerlink" title="递推公式算法实现"></a>递推公式算法实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int Fib( n )</span><br><span class="line">&#123;</span><br><span class="line">    if ( n == 1 || n == 2 ) return 1;</span><br><span class="line">    else return Fib(n-1) + Fib(n-2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(2^n)</p><h3 id="动态规划算法实现"><a href="#动态规划算法实现" class="headerlink" title="动态规划算法实现"></a>动态规划算法实现</h3><p>递推公式计算Fib(n-1)时Fib(n-2)又被计算了一次，所以导致大量重复计算，为了避免重复计算，我们可以将之前计算出来的结果存储起来，这就是动态规划的思想了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int Fib( n )</span><br><span class="line">&#123;</span><br><span class="line">    int F[ MAXSIZE ];</span><br><span class="line">    F[ 1 ] = F[ 2 ] = 1;</span><br><span class="line">    for ( int i = 3 ; i &lt;= n ; ++ i )</span><br><span class="line">        F[ i ] = F[ i-2 ] + F[ i-1 ];</span><br><span class="line">    return F[ n ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n)</p><h3 id="通项公式算法实现"><a href="#通项公式算法实现" class="headerlink" title="通项公式算法实现"></a>通项公式算法实现</h3><p>通项公式方式实现，其实回到了快速幂的计算方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">double pow (double a, int n)&#123;</span><br><span class="line"> if (n == 0) return 1;</span><br><span class="line">    if (n == 1) return n;</span><br><span class="line">    double t = pow(a, n/2);</span><br><span class="line">    return t * t * pow(a, n%2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(㏒ n)</p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://www.zhihu.com/question/25217301" target="_blank" rel="noopener">斐波那契数列通项公式是怎样推导出来的？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;算法设计——斐波那契数列&quot;&gt;&lt;a href=&quot;#算法设计——斐波那契数列&quot; class=&quot;headerlink&quot; title=&quot;算法设计——斐波那契数列&quot;&gt;&lt;/a&gt;算法设计——斐波那契数列&lt;/h2&gt;&lt;h3 id=&quot;斐波那契数列&quot;&gt;&lt;a href=&quot;#斐波那契数列&quot; class=&quot;headerlink&quot; title=&quot;斐波那契数列&quot;&gt;&lt;/a&gt;斐波那契数列&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;斐波那契数列又称黄金分割数列，这个数列从第三项开始，每一项都等于前两项之和。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;递推公式&quot;&gt;&lt;a href=&quot;#递推公式&quot; class=&quot;headerlink&quot; title=&quot;递推公式&quot;&gt;&lt;/a&gt;递推公式&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;F(0) = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F(1) = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F(n) = F(n-1) + F(n-1);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="算法设计" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>算法设计------队列实现</title>
    <link href="http://yoursite.com/2019/03/10/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1-%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/03/10/算法设计-队列实现/</id>
    <published>2019-03-10T04:49:46.000Z</published>
    <updated>2019-03-10T04:51:06.429Z</updated>
    
    <content type="html"><![CDATA[<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><blockquote><p>队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中的元素进出是按先进先出的原则进行（FIFO–First In First Out）。</p></blockquote><a id="more"></a><h3 id="队列的C语言实现"><a href="#队列的C语言实现" class="headerlink" title="队列的C语言实现"></a>队列的C语言实现</h3><h4 id="h文件"><a href="#h文件" class="headerlink" title=".h文件"></a>.h文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#ifndef Queue_h</span><br><span class="line">#define Queue_h</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdbool.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct node &#123;</span><br><span class="line">    int member;//数据域</span><br><span class="line">    struct node * pNext;</span><br><span class="line">&#125;Node, * pNode;</span><br><span class="line"></span><br><span class="line">typedef struct queue&#123;</span><br><span class="line">    pNode pHead;//队头</span><br><span class="line">    pNode pTail;//队尾</span><br><span class="line">&#125;Queue, * pQueue;</span><br><span class="line"></span><br><span class="line">void InitQueue(pQueue);//初始化</span><br><span class="line">bool InQueue(pQueue,int);//入队</span><br><span class="line">int DeQueue(pQueue);//出队</span><br><span class="line">bool EmptyQueue(pQueue);//判空</span><br><span class="line">void ClearQueue(pQueue);//清空队列</span><br><span class="line">void TraverQueue(pQueue);//遍历队列</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h4 id="c文件"><a href="#c文件" class="headerlink" title=".c文件"></a>.c文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Queue.h&quot;</span><br><span class="line">#include &quot;stdlib.h&quot;</span><br><span class="line"></span><br><span class="line">void InitQueue(pQueue queue)&#123;</span><br><span class="line">    queue -&gt; pHead = malloc(sizeof(Node));</span><br><span class="line">    if (NULL == queue -&gt; pHead) &#123;</span><br><span class="line">        printf(&quot;分配内存失败&quot;);</span><br><span class="line">        exit(-1);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        queue -&gt; pTail = queue -&gt; pHead;</span><br><span class="line">        queue -&gt; pTail -&gt; pNext = NULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bool InQueue(pQueue queue,int num)&#123;</span><br><span class="line">    pNode pNew = malloc(sizeof(Node));</span><br><span class="line">    if (NULL == pNew) &#123;</span><br><span class="line">        printf(&quot;分配内存失败&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        queue -&gt; pTail -&gt; member = num;</span><br><span class="line">        queue -&gt; pTail -&gt; pNext = pNew;</span><br><span class="line">        queue -&gt; pTail = pNew;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bool EmptyQueue(pQueue queue)&#123;</span><br><span class="line">    if (queue -&gt; pTail == queue -&gt; pHead) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int DeQueue(pQueue queue)&#123;</span><br><span class="line">    </span><br><span class="line">    if (EmptyQueue(queue)) &#123;</span><br><span class="line">        printf(&quot;Queue is Empty&quot;);</span><br><span class="line">        exit(-1);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        int return_val;</span><br><span class="line">        pNode pTemp = queue -&gt; pHead;</span><br><span class="line">        queue -&gt; pHead = queue -&gt; pHead -&gt; pNext;</span><br><span class="line">        return_val = pTemp -&gt; member;</span><br><span class="line">        free(pTemp);</span><br><span class="line">        return return_val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ClearQueue(pQueue queue)&#123;</span><br><span class="line">    </span><br><span class="line">    pNode pHead = NULL;</span><br><span class="line">    while (!EmptyQueue(queue)) &#123;</span><br><span class="line">        pHead = queue -&gt; pHead;</span><br><span class="line">        queue -&gt; pHead = queue -&gt; pHead -&gt; pNext;</span><br><span class="line">        free(pHead);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void TraverQueue(pQueue queue)&#123;</span><br><span class="line">    pNode  pHead = queue -&gt; pHead;</span><br><span class="line">    while (pHead != queue -&gt; pTail) &#123;</span><br><span class="line">        printf(&quot;%d&quot;, pHead -&gt; member);</span><br><span class="line">        pHead = pHead -&gt; pNext;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">void testQueue ()&#123;</span><br><span class="line">    Queue queue;</span><br><span class="line">    int i;</span><br><span class="line">    int re_num;</span><br><span class="line">    InitQueue(&amp;queue);</span><br><span class="line">    </span><br><span class="line">    for (i = 0;  i &lt; 5; i ++) &#123;</span><br><span class="line">        printf(&quot;第 %d 个数：\n&quot;,i+1);</span><br><span class="line">        if (InQueue(&amp;queue, i + 100)) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            printf(&quot;进行入队操作失败！\n&quot;);</span><br><span class="line">            exit(-1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;queue after inQueue\n&quot;);</span><br><span class="line">    TraverQueue(&amp;queue);</span><br><span class="line">    </span><br><span class="line">    for (int i = 0; i &lt; 3; i ++) &#123;</span><br><span class="line">        re_num = DeQueue(&amp;queue);</span><br><span class="line">        printf(&quot;remover %d \n&quot;,re_num);</span><br><span class="line">        </span><br><span class="line">        printf(&quot;queue after dequeue\n&quot;);</span><br><span class="line">        TraverQueue(&amp;queue);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ClearQueue(&amp;queue);</span><br><span class="line">    printf(&quot;queue after clear\n&quot;);</span><br><span class="line">    TraverQueue(&amp;queue);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="时间复杂度：InQueue、Dequeue操作的时间复杂度均为-O-1"><a href="#时间复杂度：InQueue、Dequeue操作的时间复杂度均为-O-1" class="headerlink" title="时间复杂度：InQueue、Dequeue操作的时间复杂度均为 O(1)"></a>时间复杂度：InQueue、Dequeue操作的时间复杂度均为 O(1)</h5>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中的元素进出是按先进先出的原则进行（FIFO–First In First Out）。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式------策略模式</title>
    <link href="http://yoursite.com/2016/06/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/06/10/设计模式-策略模式/</id>
    <published>2016-06-09T16:00:00.000Z</published>
    <updated>2019-03-06T13:06:15.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式——策略模式"><a href="#设计模式——策略模式" class="headerlink" title="设计模式——策略模式"></a>设计模式——策略模式</h2><p>考虑一个car类，有个brake（制动）方法，多个汽车模型可能拥有几种不同的制动行为。<br>方案一：由于制动行为在模型间频繁变化，通常的方法是通过继承来实现，在子类中实现这些行为。这种方法有很大的缺点：</p><ol><li>必须在每个模型中实现制动行为，各个汽车模型之间存在大量重复代码（不同汽车模型的制动行为可能是一样的）。</li><li>汽车的模型与制动行为的实现耦合在一起，如果某种制动行为发生变化或新增一个制动行为，那么对应的所有汽车模型就要修改，不符合“封装变化原则”与“开闭原则”。</li><li>随着汽车模型数量的增加，管理制动行为的成本大大增加。如，对于所有x种汽车模型都要稍微修改一下制动行为。我们发现，当涉及到“维护”时，以复用为目的的继承，解决并不完美。</li></ol><p>方案二：将制动行为封装进一组行为类中，通过组合动态设定汽车模型对应的制动行为。当有制动行为修改或有新的制动行为我们可以操纵行为类，将行为类的实现与汽车模型分离，减少耦合度。</p><p>上述方案即为策略模式，让行为（算法）和对象分开来，使得行为（算法）可以独立于它的客户的变化。</p><a id="more"></a><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>策略模式：定义了算法族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。</p></blockquote><h3 id="汽车模型的实现"><a href="#汽车模型的实现" class="headerlink" title="汽车模型的实现"></a>汽车模型的实现</h3><h4 id="行为类"><a href="#行为类" class="headerlink" title="行为类"></a>行为类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//定义制动行为接口makeBrake,.m文件里没有任何实现 </span><br><span class="line">@interface BrakeBehavior : NSObject</span><br><span class="line">-(void)makeBrake;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//继承自BrakeBehavior 实现makeBrake接口为NormalBrake</span><br><span class="line">@interface NormalBrake : BrakeBehavior</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation NormalBrake</span><br><span class="line"></span><br><span class="line">-(void)makeBrake&#123;</span><br><span class="line">    NSLog(@&quot;make brake With NormalBrake&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//继承自BrakeBehavior 实现makeBrake接口为ABSBrake</span><br><span class="line">@interface ABSBrake : BrakeBehavior</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ABSBrake</span><br><span class="line"></span><br><span class="line">-(void)makeBrake&#123;</span><br><span class="line">    NSLog(@&quot;make brake With ABSBrake&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h4 id="汽车模型类"><a href="#汽车模型类" class="headerlink" title="汽车模型类"></a>汽车模型类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">//Car模型基类，通过组合绑定制动行为</span><br><span class="line">@interface Car : NSObject</span><br><span class="line"></span><br><span class="line">@property(nonatomic,strong)BrakeBehavior * brake;</span><br><span class="line">-(void)performBrake;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Car</span><br><span class="line"></span><br><span class="line">-(void)performBrake&#123;</span><br><span class="line">    [self.brake makeBrake];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//Sedan模型，默认制动行为NormalBrake</span><br><span class="line">@interface Sedan : Car</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Sedan</span><br><span class="line"></span><br><span class="line">-(instancetype)init&#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        self.brake = [NormalBrake new];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//SUV模型，默认制动行为ABSBrake</span><br><span class="line">@interface SUV : Car</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation SUV</span><br><span class="line"></span><br><span class="line">-(instancetype)init&#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        self.brake = [ABSBrake new];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-(void)testForCar&#123;</span><br><span class="line">   </span><br><span class="line">    Car * sedanCar = [Sedan new];</span><br><span class="line">    [sedanCar performBrake];//NormalBrake</span><br><span class="line">   </span><br><span class="line">    Car * suvCar = [SUV new];</span><br><span class="line">    [suvCar performBrake];//ABSBrake</span><br><span class="line">   </span><br><span class="line">    //动态改变sendanCar的制动行为为ABSBrake</span><br><span class="line">    sedanCar.brake = [ABSBrake new];</span><br><span class="line">    [sedanCar performBrake];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>通过UML类图分析汽车模型实现:</p><p><img src="/2016/06/10/设计模式-策略模式/strategy_UML.png" alt=""></p><ul><li>BrakeBehavior ：策略类基类，声明相应策略方法。</li><li>NormalBrake、ABSBrake：具体策略类，实现具体的策略方法。</li><li>Car：上下文类，持有具体的策略类实例，并负责调用相关策略。</li><li>Sedan、SUV：具体的上下文实例类，持有对应默认策略类实例。</li></ul><h3 id="策略模式的优点"><a href="#策略模式的优点" class="headerlink" title="策略模式的优点"></a>策略模式的优点</h3><ul><li>提供使用组合替代继承的方案，将策略（制动行为）的实现从客户（汽车模型）中解耦。</li><li>符合“开-闭原则”，可以在不修改原有系统基础上选择策略。</li><li>易于拓展，可以灵活的增加新策略。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>维护多个策略类给开发带来额外开销。</li><li>调用者（上下文类）必须知道所有策略类，并自行决定使用哪一个策略类。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>策略模式本质是面向对象中的继承和多态。策略模式主要用于将策略（算法、行为）的定义与使用策略的上下文分开，达到策略实现与客户（上下文）解耦的目的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设计模式——策略模式&quot;&gt;&lt;a href=&quot;#设计模式——策略模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式——策略模式&quot;&gt;&lt;/a&gt;设计模式——策略模式&lt;/h2&gt;&lt;p&gt;考虑一个car类，有个brake（制动）方法，多个汽车模型可能拥有几种不同的制动行为。&lt;br&gt;方案一：由于制动行为在模型间频繁变化，通常的方法是通过继承来实现，在子类中实现这些行为。这种方法有很大的缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;必须在每个模型中实现制动行为，各个汽车模型之间存在大量重复代码（不同汽车模型的制动行为可能是一样的）。&lt;/li&gt;
&lt;li&gt;汽车的模型与制动行为的实现耦合在一起，如果某种制动行为发生变化或新增一个制动行为，那么对应的所有汽车模型就要修改，不符合“封装变化原则”与“开闭原则”。&lt;/li&gt;
&lt;li&gt;随着汽车模型数量的增加，管理制动行为的成本大大增加。如，对于所有x种汽车模型都要稍微修改一下制动行为。我们发现，当涉及到“维护”时，以复用为目的的继承，解决并不完美。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方案二：将制动行为封装进一组行为类中，通过组合动态设定汽车模型对应的制动行为。当有制动行为修改或有新的制动行为我们可以操纵行为类，将行为类的实现与汽车模型分离，减少耦合度。&lt;/p&gt;
&lt;p&gt;上述方案即为策略模式，让行为（算法）和对象分开来，使得行为（算法）可以独立于它的客户的变化。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>算法设计------ AVL Tree</title>
    <link href="http://yoursite.com/2016/06/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1-AVLTree/"/>
    <id>http://yoursite.com/2016/06/01/算法设计-AVLTree/</id>
    <published>2016-05-31T16:00:00.000Z</published>
    <updated>2019-03-06T13:07:50.476Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>本文是在Binary Search Tree的基础上讨论构建AVL树，了解Binary Search Tree 戳我</p><h3 id="AVL-树"><a href="#AVL-树" class="headerlink" title="AVL 树"></a>AVL 树</h3><blockquote><p>定义：AVL树是具有以下性质的二叉搜索树：</p></blockquote><blockquote><ul><li>在AVL树中任何节点的两个子树的高度最大差值为1。</li><li>插入或删除操作可能需要通过一次或多次树旋转来重新平衡这个树。</li></ul></blockquote><a id="more"></a><h3 id="AVLTree-和二叉搜索树"><a href="#AVLTree-和二叉搜索树" class="headerlink" title="AVLTree 和二叉搜索树"></a>AVLTree 和二叉搜索树</h3><p><img src="/2016/06/01/算法设计-AVLTree/AVL_BinarySearch.png" alt=""></p><p>AVL树相比于二叉搜索树的优势在于： 查找、插入、删除的平均和最坏时间复杂度均为O（log n）。</p><h3 id="旋转操作"><a href="#旋转操作" class="headerlink" title="旋转操作"></a>旋转操作</h3><p>前面提到，在执行插入或删除操作后可能需要通过一次或多次树旋转来重新平衡这个树。</p><h4 id="基本旋转操作"><a href="#基本旋转操作" class="headerlink" title="基本旋转操作"></a>基本旋转操作</h4><p>基本的旋转操作为左旋、右旋：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> T1, T2 和 T3是以y (左侧) 或 x (右侧)为根的子树，两棵树可以在不打破BST属性的情况下通过右旋（左旋）进行转换</span><br><span class="line">                y                               x</span><br><span class="line">               / \           右旋               /  \</span><br><span class="line">              x   T3   – – – – – – – &gt;        T1   y</span><br><span class="line">             / \       &lt; - - - - - - -            / \</span><br><span class="line">            T1  T2           左旋                T2  T3</span><br><span class="line">旋转前后树的key值均满足</span><br><span class="line">      keys(T1) &lt; key(x) &lt; keys(T2) &lt; key(y) &lt; keys(T3)</span><br></pre></td></tr></table></figure><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//左旋操作</span><br><span class="line">p_AVLTree_Node leftRotation(p_AVLTree_Node root)&#123;</span><br><span class="line">//旋转操作</span><br><span class="line">    p_AVLTree_Node right_Child = root -&gt; right_Child;</span><br><span class="line">    root -&gt; right_Child = right_Child -&gt; left_Child;</span><br><span class="line">    right_Child -&gt; left_Child  = root;</span><br><span class="line">    </span><br><span class="line">    //更新节点的高度</span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(right_Child);</span><br><span class="line">    return right_Child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//右旋操作</span><br><span class="line">p_AVLTree_Node rightRotation(p_AVLTree_Node root)&#123;</span><br><span class="line">//旋转操作</span><br><span class="line">    p_AVLTree_Node left_Child = root -&gt; left_Child;</span><br><span class="line">    root -&gt; left_Child = left_Child -&gt; right_Child;</span><br><span class="line">    left_Child -&gt; right_Child = root;</span><br><span class="line">    </span><br><span class="line">    //更新节点的高度</span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(left_Child);</span><br><span class="line">    return left_Child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="case分析"><a href="#case分析" class="headerlink" title="case分析"></a>case分析</h4><p>以z为根节点，x、y为子节点的不平衡二叉搜索树可能有四种排列：</p><ol><li>y是z的左边孩子，x是y的左边孩子（Left Left Case）</li><li>y是z的左边孩子，x是y的右边孩子（Left Right Case）</li><li>y是z的右边孩子，x是y的右边孩子（Right Right Case）</li><li>y是z的右边孩子，x是y的左边孩子 （Right Left Case）</li></ol><p>对于不同的case 需要执行不同的选择操作组合来使树重新达到平衡：</p><h4 id="Left-Left-Case"><a href="#Left-Left-Case" class="headerlink" title="Left Left Case"></a>Left Left Case</h4><p>单次右旋z 达到平衡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">T1, T2, T3 和 T4 为子树.</span><br><span class="line">         z                                      y </span><br><span class="line">        / \                                   /   \</span><br><span class="line">       y   T4      Right Rotate (z)          x      z</span><br><span class="line">      / \          - - - - - - - - -&gt;      /  \    /  \ </span><br><span class="line">     x   T3                               T1  T2  T3  T4</span><br><span class="line">    / \</span><br><span class="line">  T1   T2</span><br></pre></td></tr></table></figure><h4 id="Left-Right-Case"><a href="#Left-Right-Case" class="headerlink" title="Left Right Case"></a>Left Right Case</h4><p>左旋y 右旋z达到平衡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">T1, T2, T3 和 T4 为子树.</span><br><span class="line"></span><br><span class="line">     z                               z                           x</span><br><span class="line">    / \                            /   \                        /  \ </span><br><span class="line">   y   T4  Left Rotate (y)        x    T4  Right Rotate(z)    y      z</span><br><span class="line">  / \      - - - - - - - - -&gt;    /  \      - - - - - - - -&gt;  / \    / \</span><br><span class="line">T1   x                          y    T3                    T1  T2 T3  T4</span><br><span class="line">    / \                        / \</span><br><span class="line">  T2   T3                    T1   T2</span><br></pre></td></tr></table></figure><h4 id="Right-Right-Case"><a href="#Right-Right-Case" class="headerlink" title="Right Right Case"></a>Right Right Case</h4><p>单次左旋达到平衡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">T1, T2, T3 和 T4 为子树.</span><br><span class="line"></span><br><span class="line">  z                                y</span><br><span class="line"> /  \                            /   \ </span><br><span class="line">T1   y     Left Rotate(z)       z      x</span><br><span class="line">    /  \   - - - - - - - -&gt;    / \    / \</span><br><span class="line">   T2   x                     T1  T2 T3  T4</span><br><span class="line">       / \</span><br><span class="line">     T3  T4</span><br></pre></td></tr></table></figure><h4 id="Right-Left-Case"><a href="#Right-Left-Case" class="headerlink" title="Right Left Case"></a>Right Left Case</h4><p>右旋y 左旋z达到平衡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">T1, T2, T3 和 T4 为子树.</span><br><span class="line"></span><br><span class="line">  z                            z                            x</span><br><span class="line">  / \                          / \                          /  \ </span><br><span class="line">T1   y   Right Rotate (y)    T1   x      Left Rotate(z)   z      x</span><br><span class="line">    / \  - - - - - - - - -&gt;     /  \   - - - - - - - -&gt;  / \    / \</span><br><span class="line">   x   T4                      T2   y                  T1  T2  T3  T4</span><br><span class="line">  / \                              /  \</span><br><span class="line">T2   T3                           T3   T4</span><br></pre></td></tr></table></figure></p><h3 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h3><h4 id="h-文件"><a href="#h-文件" class="headerlink" title=".h 文件"></a>.h 文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">typedef struct avlTree_Node&#123;</span><br><span class="line">    int height;</span><br><span class="line">    int memebr;</span><br><span class="line">    struct avlTree_Node * left_Child;</span><br><span class="line">    struct avlTree_Node * right_Child;</span><br><span class="line">&#125;AVLTree_Node, * p_AVLTree_Node;</span><br><span class="line"></span><br><span class="line">p_AVLTree_Node newAVLNode(int member);</span><br><span class="line">//插入</span><br><span class="line">p_AVLTree_Node insertAVLTree(p_AVLTree_Node root,int member);</span><br><span class="line">//删除</span><br><span class="line">p_AVLTree_Node deleteAVLTree(p_AVLTree_Node root,int member);</span><br><span class="line">//前序遍历</span><br><span class="line">void preOrder (p_AVLTree_Node root);</span><br></pre></td></tr></table></figure><h4 id="c-文件"><a href="#c-文件" class="headerlink" title=".c 文件"></a>.c 文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">p_AVLTree_Node newAVLNode(int member)&#123;</span><br><span class="line">    p_AVLTree_Node node = malloc(sizeof(AVLTree_Node));</span><br><span class="line">    if (NULL == node) &#123;</span><br><span class="line">        printf(&quot;分配内存失败&quot;);</span><br><span class="line">        exit(-1);</span><br><span class="line">    &#125;</span><br><span class="line">    node -&gt; left_Child = NULL;</span><br><span class="line">    node -&gt; right_Child = NULL;</span><br><span class="line">    node -&gt; height = 1;</span><br><span class="line">    node -&gt; memebr = member;</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int height (p_AVLTree_Node node)&#123;</span><br><span class="line">    if (node == NULL) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return node -&gt; height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int max (int a, int b)&#123;</span><br><span class="line">    return  (a &gt; b)? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void updateHeight (p_AVLTree_Node node)&#123;</span><br><span class="line">    node -&gt; height = max( height(node -&gt; left_Child), height(node -&gt; right_Child)) + 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//右旋操作</span><br><span class="line">p_AVLTree_Node rightRotation(p_AVLTree_Node root)&#123;</span><br><span class="line">    p_AVLTree_Node left_Child = root -&gt; left_Child;</span><br><span class="line">    root -&gt; left_Child = left_Child -&gt; right_Child;</span><br><span class="line">    left_Child -&gt; right_Child = root;</span><br><span class="line">    </span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(left_Child);</span><br><span class="line">    return left_Child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//左旋操作</span><br><span class="line">p_AVLTree_Node leftRotation(p_AVLTree_Node root)&#123;</span><br><span class="line">    p_AVLTree_Node right_Child = root -&gt; right_Child;</span><br><span class="line">    root -&gt; right_Child = right_Child -&gt; left_Child;</span><br><span class="line">    right_Child -&gt; left_Child  = root;</span><br><span class="line">    </span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(right_Child);</span><br><span class="line">    return right_Child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void preOrder (p_AVLTree_Node root)&#123;</span><br><span class="line">    if (root != NULL) &#123;</span><br><span class="line">        printf(&quot;%d &quot;,root -&gt; memebr);</span><br><span class="line">        preOrder(root -&gt; left_Child);</span><br><span class="line">        preOrder(root -&gt; right_Child);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int getBalance(p_AVLTree_Node node)&#123;</span><br><span class="line">    if (node == NULL) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return height(node -&gt; left_Child) - height(node -&gt; right_Child);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p_AVLTree_Node minAVLNode(p_AVLTree_Node root)&#123;</span><br><span class="line">    p_AVLTree_Node currrent = root;</span><br><span class="line">    while (currrent -&gt; left_Child) &#123;</span><br><span class="line">        currrent = currrent -&gt; left_Child;</span><br><span class="line">    &#125;</span><br><span class="line">    return currrent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p_AVLTree_Node insertAVLTree(p_AVLTree_Node root,int member)&#123;</span><br><span class="line">    //插入</span><br><span class="line">    if (root == NULL) return newAVLNode(member);</span><br><span class="line">    if (root -&gt; memebr == member) &#123;</span><br><span class="line">        printf(&quot;Equal keys are not allowed in BST&quot;);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;else if(member &lt; root -&gt; memebr)&#123;</span><br><span class="line">        root -&gt; left_Child = insertAVLTree(root -&gt; left_Child, member);</span><br><span class="line">    &#125;else if (member &gt; root -&gt; memebr)&#123;</span><br><span class="line">        root -&gt; right_Child = insertAVLTree(root -&gt; right_Child, member);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    updateHeight(root);</span><br><span class="line">    </span><br><span class="line">    //旋转</span><br><span class="line">    int balance = getBalance(root);</span><br><span class="line">    if (balance &gt; 1 &amp;&amp; member &lt; root -&gt; left_Child -&gt; memebr) &#123;</span><br><span class="line">        return  rightRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    if (balance &gt; 1 &amp;&amp; member &gt; root -&gt; left_Child -&gt; memebr) &#123;</span><br><span class="line">        root -&gt; left_Child = leftRotation(root -&gt; left_Child);</span><br><span class="line">        return rightRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    if (balance &lt; -1 &amp;&amp; member &gt; root -&gt; right_Child -&gt; memebr) &#123;</span><br><span class="line">        return leftRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    if (balance &lt; -1 &amp;&amp; member &lt; root -&gt; right_Child -&gt; memebr) &#123;</span><br><span class="line">        root -&gt; right_Child = rightRotation(root -&gt; right_Child);</span><br><span class="line">        return  leftRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p_AVLTree_Node deleteAVLTree(p_AVLTree_Node root,int member)&#123;</span><br><span class="line">    //删除</span><br><span class="line">    if (root == NULL) &#123;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;else if (member &lt; root -&gt; memebr)&#123;</span><br><span class="line">        root -&gt; left_Child = deleteAVLTree(root -&gt; left_Child, member);</span><br><span class="line">    &#125;else if (member &gt; root -&gt; memebr)&#123;</span><br><span class="line">        root -&gt; right_Child = deleteAVLTree(root -&gt; right_Child, member);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if (root -&gt; left_Child == NULL) &#123;</span><br><span class="line">            p_AVLTree_Node temp = root -&gt; right_Child;</span><br><span class="line">            free(root);</span><br><span class="line">            return temp;</span><br><span class="line">        &#125;else if (root -&gt; right_Child == NULL)&#123;</span><br><span class="line">            p_AVLTree_Node temp = root -&gt; left_Child;</span><br><span class="line">            free(root);</span><br><span class="line">            return temp;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            p_AVLTree_Node temp = minAVLNode(root -&gt; right_Child);</span><br><span class="line">            root -&gt; memebr = temp -&gt; memebr;</span><br><span class="line">            free(temp);</span><br><span class="line">            return root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    updateHeight(root);</span><br><span class="line">    //旋转</span><br><span class="line">    int balance = getBalance(root);</span><br><span class="line">    if (balance &gt; 1 &amp;&amp;  root -&gt; left_Child) &#123;</span><br><span class="line">        return  rightRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    if (balance &gt; 1 &amp;&amp;  root -&gt; right_Child) &#123;</span><br><span class="line">        root -&gt; left_Child = leftRotation(root -&gt; left_Child);</span><br><span class="line">        return rightRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    if (balance &lt; -1 &amp;&amp;  root -&gt; right_Child ) &#123;</span><br><span class="line">        return leftRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    if (balance &lt; -1 &amp;&amp;  root -&gt; left_Child ) &#123;</span><br><span class="line">        root -&gt; right_Child = rightRotation(root -&gt; right_Child);</span><br><span class="line">        return  leftRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">void testAVLTree()&#123;</span><br><span class="line">    </span><br><span class="line">    p_AVLTree_Node root = NULL;</span><br><span class="line">    root = insertAVLTree(root, 9);</span><br><span class="line">    root = insertAVLTree(root, 5);</span><br><span class="line">    root = insertAVLTree(root, 10);</span><br><span class="line">    root = insertAVLTree(root, 0);</span><br><span class="line">    root = insertAVLTree(root, 6);</span><br><span class="line">    root = insertAVLTree(root, 11);</span><br><span class="line">    root = insertAVLTree(root, -1);</span><br><span class="line">    root = insertAVLTree(root, 1);</span><br><span class="line">    root = insertAVLTree(root, 2);</span><br><span class="line">    </span><br><span class="line">    /* The constructed AVL Tree would be</span><br><span class="line">     9</span><br><span class="line">     /  \</span><br><span class="line">     1    10</span><br><span class="line">     /  \     \</span><br><span class="line">     0    5     11</span><br><span class="line">     /    /  \</span><br><span class="line">     -1   2    6</span><br><span class="line">     */</span><br><span class="line">    printf(&quot;Preorder traversal of the constructed AVL &quot;</span><br><span class="line">           &quot;tree is \n&quot;);</span><br><span class="line"></span><br><span class="line">    preOrder(root);</span><br><span class="line"></span><br><span class="line">    root = deleteAVLTree(root, 10);</span><br><span class="line"></span><br><span class="line">    /* The AVL Tree after deletion of 10</span><br><span class="line">     1</span><br><span class="line">     /  \</span><br><span class="line">     0    9</span><br><span class="line">     /     /  \</span><br><span class="line">     -1    5     11</span><br><span class="line">     /  \</span><br><span class="line">     2    6</span><br><span class="line">     */</span><br><span class="line">    printf(&quot;\nPreorder traversal after deletion of 10 \n&quot;);</span><br><span class="line">    preOrder(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码输出"><a href="#代码输出" class="headerlink" title="代码输出"></a>代码输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Preorder traversal of the constructed AVL tree is </span><br><span class="line">9 1 0 -1 5 2 6 10 11 </span><br><span class="line">Preorder traversal after deletion of 10 </span><br><span class="line">1 0 -1 9 5 2 6 11</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;本文是在Binary Search Tree的基础上讨论构建AVL树，了解Binary Search Tree 戳我&lt;/p&gt;
&lt;h3 id=&quot;AVL-树&quot;&gt;&lt;a href=&quot;#AVL-树&quot; class=&quot;headerlink&quot; title=&quot;AVL 树&quot;&gt;&lt;/a&gt;AVL 树&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;定义：AVL树是具有以下性质的二叉搜索树：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在AVL树中任何节点的两个子树的高度最大差值为1。&lt;/li&gt;
&lt;li&gt;插入或删除操作可能需要通过一次或多次树旋转来重新平衡这个树。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法设计" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="算法设计" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
</feed>
