<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kai&#39;s Blog</title>
  
  <subtitle>Kai&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-11T12:47:11.097Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AstorKai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法设计------ AVL Tree</title>
    <link href="http://yoursite.com/2016/06/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1------%20AVL%20Tree/"/>
    <id>http://yoursite.com/2016/06/01/算法设计------ AVL Tree/</id>
    <published>2016-05-31T16:00:00.000Z</published>
    <updated>2018-12-11T12:47:11.097Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>本文是在Binary Search Tree的基础上讨论构建AVL树，了解Binary Search Tree 戳我</p><h3 id="AVL-树"><a href="#AVL-树" class="headerlink" title="AVL 树"></a>AVL 树</h3><blockquote><p>定义：AVL树是具有以下性质的二叉搜索树：</p></blockquote><blockquote><ul><li>在AVL树中任何节点的两个子树的高度最大差值为1。</li><li>插入或删除操作可能需要通过一次或多次树旋转来重新平衡这个树。</li></ul></blockquote><h3 id="AVLTree-和二叉搜索树"><a href="#AVLTree-和二叉搜索树" class="headerlink" title="AVLTree 和二叉搜索树"></a>AVLTree 和二叉搜索树</h3><p><img src="/postImages/算法设计------\ AVL\ Tree/AVL_BinarySearch.png" alt=""></p><p>AVL树相比于二叉搜索树的优势在于： 查找、插入、删除的平均和最坏时间复杂度均为O（log n）。</p><h3 id="旋转操作"><a href="#旋转操作" class="headerlink" title="旋转操作"></a>旋转操作</h3><p>前面提到，在执行插入或删除操作后可能需要通过一次或多次树旋转来重新平衡这个树。</p><h4 id="基本旋转操作"><a href="#基本旋转操作" class="headerlink" title="基本旋转操作"></a>基本旋转操作</h4><p>基本的旋转操作为左旋、右旋：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> T1, T2 和 T3是以y (左侧) 或 x (右侧)为根的子树，两棵树可以在不打破BST属性的情况下通过右旋（左旋）进行转换</span><br><span class="line">                y                               x</span><br><span class="line">               / \           右旋               /  \</span><br><span class="line">              x   T3   – – – – – – – &gt;        T1   y</span><br><span class="line">             / \       &lt; - - - - - - -            / \</span><br><span class="line">            T1  T2           左旋                T2  T3</span><br><span class="line">旋转前后树的key值均满足</span><br><span class="line">      keys(T1) &lt; key(x) &lt; keys(T2) &lt; key(y) &lt; keys(T3)</span><br></pre></td></tr></table></figure><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//左旋操作</span><br><span class="line">p_AVLTree_Node leftRotation(p_AVLTree_Node root)&#123;</span><br><span class="line">//旋转操作</span><br><span class="line">    p_AVLTree_Node right_Child = root -&gt; right_Child;</span><br><span class="line">    root -&gt; right_Child = right_Child -&gt; left_Child;</span><br><span class="line">    right_Child -&gt; left_Child  = root;</span><br><span class="line">    </span><br><span class="line">    //更新节点的高度</span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(right_Child);</span><br><span class="line">    return right_Child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//右旋操作</span><br><span class="line">p_AVLTree_Node rightRotation(p_AVLTree_Node root)&#123;</span><br><span class="line">//旋转操作</span><br><span class="line">    p_AVLTree_Node left_Child = root -&gt; left_Child;</span><br><span class="line">    root -&gt; left_Child = left_Child -&gt; right_Child;</span><br><span class="line">    left_Child -&gt; right_Child = root;</span><br><span class="line">    </span><br><span class="line">    //更新节点的高度</span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(left_Child);</span><br><span class="line">    return left_Child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="case分析"><a href="#case分析" class="headerlink" title="case分析"></a>case分析</h4><p>以z为根节点，x、y为子节点的不平衡二叉搜索树可能有四种排列：</p><ol><li>y是z的左边孩子，x是y的左边孩子（Left Left Case）</li><li>y是z的左边孩子，x是y的右边孩子（Left Right Case）</li><li>y是z的右边孩子，x是y的右边孩子（Right Right Case）</li><li>y是z的右边孩子，x是y的左边孩子 （Right Left Case）</li></ol><p>对于不同的case 需要执行不同的选择操作组合来使树重新达到平衡：</p><h4 id="Left-Left-Case"><a href="#Left-Left-Case" class="headerlink" title="Left Left Case"></a>Left Left Case</h4><p>单次右旋z 达到平衡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">T1, T2, T3 和 T4 为子树.</span><br><span class="line">         z                                      y </span><br><span class="line">        / \                                   /   \</span><br><span class="line">       y   T4      Right Rotate (z)          x      z</span><br><span class="line">      / \          - - - - - - - - -&gt;      /  \    /  \ </span><br><span class="line">     x   T3                               T1  T2  T3  T4</span><br><span class="line">    / \</span><br><span class="line">  T1   T2</span><br></pre></td></tr></table></figure><h4 id="Left-Right-Case"><a href="#Left-Right-Case" class="headerlink" title="Left Right Case"></a>Left Right Case</h4><p>左旋y 右旋z达到平衡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">T1, T2, T3 和 T4 为子树.</span><br><span class="line"></span><br><span class="line">     z                               z                           x</span><br><span class="line">    / \                            /   \                        /  \ </span><br><span class="line">   y   T4  Left Rotate (y)        x    T4  Right Rotate(z)    y      z</span><br><span class="line">  / \      - - - - - - - - -&gt;    /  \      - - - - - - - -&gt;  / \    / \</span><br><span class="line">T1   x                          y    T3                    T1  T2 T3  T4</span><br><span class="line">    / \                        / \</span><br><span class="line">  T2   T3                    T1   T2</span><br></pre></td></tr></table></figure><h4 id="Right-Right-Case"><a href="#Right-Right-Case" class="headerlink" title="Right Right Case"></a>Right Right Case</h4><p>单次左旋达到平衡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">T1, T2, T3 和 T4 为子树.</span><br><span class="line"></span><br><span class="line">  z                                y</span><br><span class="line"> /  \                            /   \ </span><br><span class="line">T1   y     Left Rotate(z)       z      x</span><br><span class="line">    /  \   - - - - - - - -&gt;    / \    / \</span><br><span class="line">   T2   x                     T1  T2 T3  T4</span><br><span class="line">       / \</span><br><span class="line">     T3  T4</span><br></pre></td></tr></table></figure><h4 id="Right-Left-Case"><a href="#Right-Left-Case" class="headerlink" title="Right Left Case"></a>Right Left Case</h4><p>右旋y 左旋z达到平衡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">T1, T2, T3 和 T4 为子树.</span><br><span class="line"></span><br><span class="line">  z                            z                            x</span><br><span class="line">  / \                          / \                          /  \ </span><br><span class="line">T1   y   Right Rotate (y)    T1   x      Left Rotate(z)   z      x</span><br><span class="line">    / \  - - - - - - - - -&gt;     /  \   - - - - - - - -&gt;  / \    / \</span><br><span class="line">   x   T4                      T2   y                  T1  T2  T3  T4</span><br><span class="line">  / \                              /  \</span><br><span class="line">T2   T3                           T3   T4</span><br></pre></td></tr></table></figure></p><h3 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h3><h4 id="h-文件"><a href="#h-文件" class="headerlink" title=".h 文件"></a>.h 文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">typedef struct avlTree_Node&#123;</span><br><span class="line">    int height;</span><br><span class="line">    int memebr;</span><br><span class="line">    struct avlTree_Node * left_Child;</span><br><span class="line">    struct avlTree_Node * right_Child;</span><br><span class="line">&#125;AVLTree_Node, * p_AVLTree_Node;</span><br><span class="line"></span><br><span class="line">p_AVLTree_Node newAVLNode(int member);</span><br><span class="line">//插入</span><br><span class="line">p_AVLTree_Node insertAVLTree(p_AVLTree_Node root,int member);</span><br><span class="line">//删除</span><br><span class="line">p_AVLTree_Node deleteAVLTree(p_AVLTree_Node root,int member);</span><br><span class="line">//前序遍历</span><br><span class="line">void preOrder (p_AVLTree_Node root);</span><br></pre></td></tr></table></figure><h4 id="c-文件"><a href="#c-文件" class="headerlink" title=".c 文件"></a>.c 文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">p_AVLTree_Node newAVLNode(int member)&#123;</span><br><span class="line">    p_AVLTree_Node node = malloc(sizeof(AVLTree_Node));</span><br><span class="line">    if (NULL == node) &#123;</span><br><span class="line">        printf(&quot;分配内存失败&quot;);</span><br><span class="line">        exit(-1);</span><br><span class="line">    &#125;</span><br><span class="line">    node -&gt; left_Child = NULL;</span><br><span class="line">    node -&gt; right_Child = NULL;</span><br><span class="line">    node -&gt; height = 1;</span><br><span class="line">    node -&gt; memebr = member;</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int height (p_AVLTree_Node node)&#123;</span><br><span class="line">    if (node == NULL) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return node -&gt; height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int max (int a, int b)&#123;</span><br><span class="line">    return  (a &gt; b)? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void updateHeight (p_AVLTree_Node node)&#123;</span><br><span class="line">    node -&gt; height = max( height(node -&gt; left_Child), height(node -&gt; right_Child)) + 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//右旋操作</span><br><span class="line">p_AVLTree_Node rightRotation(p_AVLTree_Node root)&#123;</span><br><span class="line">    p_AVLTree_Node left_Child = root -&gt; left_Child;</span><br><span class="line">    root -&gt; left_Child = left_Child -&gt; right_Child;</span><br><span class="line">    left_Child -&gt; right_Child = root;</span><br><span class="line">    </span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(left_Child);</span><br><span class="line">    return left_Child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//左旋操作</span><br><span class="line">p_AVLTree_Node leftRotation(p_AVLTree_Node root)&#123;</span><br><span class="line">    p_AVLTree_Node right_Child = root -&gt; right_Child;</span><br><span class="line">    root -&gt; right_Child = right_Child -&gt; left_Child;</span><br><span class="line">    right_Child -&gt; left_Child  = root;</span><br><span class="line">    </span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(right_Child);</span><br><span class="line">    return right_Child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void preOrder (p_AVLTree_Node root)&#123;</span><br><span class="line">    if (root != NULL) &#123;</span><br><span class="line">        printf(&quot;%d &quot;,root -&gt; memebr);</span><br><span class="line">        preOrder(root -&gt; left_Child);</span><br><span class="line">        preOrder(root -&gt; right_Child);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int getBalance(p_AVLTree_Node node)&#123;</span><br><span class="line">    if (node == NULL) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return height(node -&gt; left_Child) - height(node -&gt; right_Child);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p_AVLTree_Node minAVLNode(p_AVLTree_Node root)&#123;</span><br><span class="line">    p_AVLTree_Node currrent = root;</span><br><span class="line">    while (currrent -&gt; left_Child) &#123;</span><br><span class="line">        currrent = currrent -&gt; left_Child;</span><br><span class="line">    &#125;</span><br><span class="line">    return currrent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p_AVLTree_Node insertAVLTree(p_AVLTree_Node root,int member)&#123;</span><br><span class="line">    //插入</span><br><span class="line">    if (root == NULL) return newAVLNode(member);</span><br><span class="line">    if (root -&gt; memebr == member) &#123;</span><br><span class="line">        printf(&quot;Equal keys are not allowed in BST&quot;);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;else if(member &lt; root -&gt; memebr)&#123;</span><br><span class="line">        root -&gt; left_Child = insertAVLTree(root -&gt; left_Child, member);</span><br><span class="line">    &#125;else if (member &gt; root -&gt; memebr)&#123;</span><br><span class="line">        root -&gt; right_Child = insertAVLTree(root -&gt; right_Child, member);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    updateHeight(root);</span><br><span class="line">    </span><br><span class="line">    //旋转</span><br><span class="line">    int balance = getBalance(root);</span><br><span class="line">    if (balance &gt; 1 &amp;&amp; member &lt; root -&gt; left_Child -&gt; memebr) &#123;</span><br><span class="line">        return  rightRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    if (balance &gt; 1 &amp;&amp; member &gt; root -&gt; left_Child -&gt; memebr) &#123;</span><br><span class="line">        root -&gt; left_Child = leftRotation(root -&gt; left_Child);</span><br><span class="line">        return rightRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    if (balance &lt; -1 &amp;&amp; member &gt; root -&gt; right_Child -&gt; memebr) &#123;</span><br><span class="line">        return leftRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    if (balance &lt; -1 &amp;&amp; member &lt; root -&gt; right_Child -&gt; memebr) &#123;</span><br><span class="line">        root -&gt; right_Child = rightRotation(root -&gt; right_Child);</span><br><span class="line">        return  leftRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p_AVLTree_Node deleteAVLTree(p_AVLTree_Node root,int member)&#123;</span><br><span class="line">    //删除</span><br><span class="line">    if (root == NULL) &#123;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;else if (member &lt; root -&gt; memebr)&#123;</span><br><span class="line">        root -&gt; left_Child = deleteAVLTree(root -&gt; left_Child, member);</span><br><span class="line">    &#125;else if (member &gt; root -&gt; memebr)&#123;</span><br><span class="line">        root -&gt; right_Child = deleteAVLTree(root -&gt; right_Child, member);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if (root -&gt; left_Child == NULL) &#123;</span><br><span class="line">            p_AVLTree_Node temp = root -&gt; right_Child;</span><br><span class="line">            free(root);</span><br><span class="line">            return temp;</span><br><span class="line">        &#125;else if (root -&gt; right_Child == NULL)&#123;</span><br><span class="line">            p_AVLTree_Node temp = root -&gt; left_Child;</span><br><span class="line">            free(root);</span><br><span class="line">            return temp;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            p_AVLTree_Node temp = minAVLNode(root -&gt; right_Child);</span><br><span class="line">            root -&gt; memebr = temp -&gt; memebr;</span><br><span class="line">            free(temp);</span><br><span class="line">            return root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    updateHeight(root);</span><br><span class="line">    //旋转</span><br><span class="line">    int balance = getBalance(root);</span><br><span class="line">    if (balance &gt; 1 &amp;&amp;  root -&gt; left_Child) &#123;</span><br><span class="line">        return  rightRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    if (balance &gt; 1 &amp;&amp;  root -&gt; right_Child) &#123;</span><br><span class="line">        root -&gt; left_Child = leftRotation(root -&gt; left_Child);</span><br><span class="line">        return rightRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    if (balance &lt; -1 &amp;&amp;  root -&gt; right_Child ) &#123;</span><br><span class="line">        return leftRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    if (balance &lt; -1 &amp;&amp;  root -&gt; left_Child ) &#123;</span><br><span class="line">        root -&gt; right_Child = rightRotation(root -&gt; right_Child);</span><br><span class="line">        return  leftRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">void testAVLTree()&#123;</span><br><span class="line">    </span><br><span class="line">    p_AVLTree_Node root = NULL;</span><br><span class="line">    root = insertAVLTree(root, 9);</span><br><span class="line">    root = insertAVLTree(root, 5);</span><br><span class="line">    root = insertAVLTree(root, 10);</span><br><span class="line">    root = insertAVLTree(root, 0);</span><br><span class="line">    root = insertAVLTree(root, 6);</span><br><span class="line">    root = insertAVLTree(root, 11);</span><br><span class="line">    root = insertAVLTree(root, -1);</span><br><span class="line">    root = insertAVLTree(root, 1);</span><br><span class="line">    root = insertAVLTree(root, 2);</span><br><span class="line">    </span><br><span class="line">    /* The constructed AVL Tree would be</span><br><span class="line">     9</span><br><span class="line">     /  \</span><br><span class="line">     1    10</span><br><span class="line">     /  \     \</span><br><span class="line">     0    5     11</span><br><span class="line">     /    /  \</span><br><span class="line">     -1   2    6</span><br><span class="line">     */</span><br><span class="line">    printf(&quot;Preorder traversal of the constructed AVL &quot;</span><br><span class="line">           &quot;tree is \n&quot;);</span><br><span class="line"></span><br><span class="line">    preOrder(root);</span><br><span class="line"></span><br><span class="line">    root = deleteAVLTree(root, 10);</span><br><span class="line"></span><br><span class="line">    /* The AVL Tree after deletion of 10</span><br><span class="line">     1</span><br><span class="line">     /  \</span><br><span class="line">     0    9</span><br><span class="line">     /     /  \</span><br><span class="line">     -1    5     11</span><br><span class="line">     /  \</span><br><span class="line">     2    6</span><br><span class="line">     */</span><br><span class="line">    printf(&quot;\nPreorder traversal after deletion of 10 \n&quot;);</span><br><span class="line">    preOrder(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码输出"><a href="#代码输出" class="headerlink" title="代码输出"></a>代码输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Preorder traversal of the constructed AVL tree is </span><br><span class="line">9 1 0 -1 5 2 6 10 11 </span><br><span class="line">Preorder traversal after deletion of 10 </span><br><span class="line">1 0 -1 9 5 2 6 11</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;本文是在Binary Search Tree的基础上讨论构建AVL树，了解Binary Search Tree 戳我&lt;/p&gt;
      
    
    </summary>
    
      <category term="算法设计" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="算法设计" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
</feed>
